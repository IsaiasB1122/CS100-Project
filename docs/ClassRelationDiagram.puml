@startuml
scale 1.5
skinparam class {
    Padding 4
    Margin 8
    FontSize 10
}

left to right direction

abstract class DataEntry {
    enum SORT_TYPE {NONE, ID, MODIFIED}
    + uint id
    + string name
    + time_t creation_time
    + time_t modified_time
    + DataEntry()
    + DataEntry(uint32_t id, string name)
    + static vector<DataEntry*> filter_data(vector<DataEntry*> data, string filter, SORT_TYPE sort = NONE)
    + string to_string()
}

DataEntry  <|--  Note
Note : + string text
Note : + uint author_id

DataEntry <|-- CategoryInfo
DataEntry <|-- Member

DataEntry <|- Task
Task : + uint category_id
Task : + vector<uint> assigned_members
Task : + NoteList notes
Task : + bool changed

DataEntry <|- TaskBoard
TaskBoard : - vector<CategoryInfo> categories
TaskBoard : - Directory* parent
TaskBoard : - vector<Task*> tasks
TaskBoard : - bool tasks_changed
TaskBoard : - bool members_changed
TaskBoard : - bool notes_changed
TaskBoard : - bool categories_changed
TaskBoard : + MemberList members
TaskBoard : + NoteList notes
TaskBoard : + CategoryList categories
TaskBoard : + uint get_id()
TaskBoard : + int write()
TaskBoard : + const vector<Task*> get_tasks()
TaskBoard : + const Task& add_task(string name, uint author = 0, uint category = 0)
TaskBoard : + void remove_task(uint id)
TaskBoard : + void move_task(uint id, uint category)
TaskBoard : + vector<Task*> filter_task_name(string query, DataEntry::SORT_TYPE sort = DataEntry::SORT_TYPE::NONE)

class NoteList {
    - vector<Note*> notes
    - uint next_note_id
    + const vector<Note*> get_notes()
    + const Note& get_note(uint id)
    + const Note& add_note(string title, string text, const Member& author)
    + const Note& edit_note(string title, string text, const Member& author)
    + void remove_note(uint id)
    + vector<Note*> filter_note_name(string query, DataEntry::SORT_TYPE sort = DataEntry::SORT_TYPE::NONE)
}

class CategoryList {
    - vector<CategoryInfo*> categories
    - uint next_category_id
    
    + CategoryList()
    + ~CategoryList();
    + const vector<CategoryInfo*> get_categories()
    + const CategoryInfo& get_category(uint id)
    + const CategoryInfo& get_category(string name)
    + const CategoryInfo& add_category(CategoryInfo category)
    + void remove_category(uint id)
    + void move_category(uint id, uint index)
    + void rename_category(uint id, string name)
    + vector<CategoryInfo*> filter_category_name(string query, DataEntry::SORT_TYPE sort = DataEntry::SORT_TYPE::NONE)
}

class MemberList {
    - vector<Member*> members
    - uint next_members_id
    
    + MemberList()
    + ~MemberList()
    + const vector<Member*> get_members()
    + const Member& get_member(uint id)
    + const Member& get_member(string name)
    + const Member& add_member(Member category)
    + void remove_member(uint id)
    + void rename_member(uint id, string name)
    + vector<Member*> filter_member_name(string query, DataEntry::SORT_TYPE sort = DataEntry::SORT_TYPE::NONE)
}

class Directory {
    - string path
    - string name
    - vector<TaskBoard*> boards
    - ActionLog action_log
    - uint next_id
    - void write_metadata();
    
    + CategoryList default_categories
    + string get_name()
    + TaskBoard* add_board(string name)
    + void remove_board(TaskBoard* board)
    + vector<TaskBoard*> get_boards()
    + TaskBoard* get_board(uint id)
    + vector<TaskBoard*> filter_board_name(string query, DataEntry::SORT_TYPE sort = DataEntry::SORT_TYPE::NONE)
    class Directory::invalid_path 
    class Directory::unsupported_version
}

class CommandManager {
    enum class COMMAND_PARSE_RESULT { BAD_COMMAND, BAD_PARAMETERS, OK, OK_EXIT_AFTER, BAD_EXIT_AFTER }
    enum class COMMAND_RUN_RESULT {ERROR, GOOD};
    + map<string, Command*> command_map;
    + bool exit
    + COMMAND_PARSE_RESULT parse_command(istream& in, ostream& out)
    + void set_parameter(string name, string value)
    + void unset_parameter(string name)
    + void _index_commands
    + void init()
}

class CommandParametersData {
    - vector<string> positional_parameters
    - map<string, string> named_parameters
    - CommandManager* parent
    + string get_parameter(string name)
    + bool has_parameter(string name)
}

abstract class Command {
    + CommandManager* parent
    + virtual string get_name()
    + virtual string get_help()
    + virtual vector<string> get_required_parameters()
    + virtual vector<string> get_optional_parameters()
    + virtual COMMAND_RUN_RESULT run(CommandParametersData parameters, ostream& out)
}

class ActionLogItem {
    + uint id
    + string action
    + time_t timestamp
    + string user
}

class ActionLog {
    - vector<ActionLogItem> items
    + void add_action(string description)
    + vector<ActionLogItem> get_actions()
}

class FileIOManager {
    
}

skinparam linetype ortho

NoteList *-- Note
CategoryInfo -* CategoryList
MemberList *- Member
TaskBoard *-- NoteList
TaskBoard *- CategoryList
TaskBoard *--  MemberList
TaskBoard *- Task
Directory *- TaskBoard
Directory *- ActionLog
ActionLog *-  ActionLogItem
CommandManager *--  Command
CommandManager  *--  CommandParametersData
CommandManager *--  ActionLog
CommandManager *-  Directory
Command  *-  CommandParametersData
@enduml
